#!/usr/bin/env python3

# Simple script to create a map of mnemonics names from standard
# system headers into their definitions. We use it to allow the
# use of such names in the "syscalls" filter in the config file.

from collections import OrderedDict

definitions = OrderedDict()
for header in ["/usr/include/asm-generic/fcntl.h", "/usr/include/asm-generic/ioctls.h"]:
    with open(header, "r") as f:
        for line in f.readlines():
            c_style_comments, cpp_style_comments = line.find("/*"), line.find("//")
            if c_style_comments >= 0:
                line = line[:c_style_comments]
            elif cpp_style_comments:
                line = line[:cpp_style_comments]

            parts = line.split()
            if line.startswith("#define") and len(parts) >= 3:
                if not parts[1].startswith("_"):
                    definitions[parts[1]] = "".join(parts[2:])

print("// Automatically generated by sysdefs_mapper.py")
print("#include <sys/ioctl.h>")
print("#include <fcntl.h>")
print("#include <string>")
print("#include <map>\n")
print("static std::map<std::string, unsigned long> sysdefs = {")
for key, value in definitions.items():
    print(f'#ifdef {key}')
    print(f'    {{"{key}", {key}}},')
    print('#endif')
print("};")